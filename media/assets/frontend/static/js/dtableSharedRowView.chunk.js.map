{"version":3,"sources":["pages/dtable-share-row/cell-formatter/text-formatter.js","pages/dtable-share-row/cell-formatter/number-formatter.js","pages/dtable-share-row/cell-formatter/date-formatter.js","pages/dtable-share-row/cell-formatter/single-select-formatter.js","pages/dtable-share-row/cell-formatter/multiple-select-formatter.js","pages/dtable-share-row/cell-formatter-widgets/collaborator-option.js","pages/dtable-share-row/cell-formatter/collaborator-formatter.js","pages/dtable-share-row/cell-formatter/checkbox-formatter.js","pages/dtable-share-row/cell-formatter-widgets/file-item.js","pages/dtable-share-row/cell-formatter/file-formatter.js","pages/dtable-share-row/cell-formatter-widgets/image-item.js","pages/dtable-share-row/cell-formatter/image-formatter.js","pages/dtable-share-row/cell-formatter/long-text-formatter.js","pages/dtable-share-row/cell-formatter/formatter-config.js","pages/dtable-share-row/row-item.js","pages/dtable-share-row/app-main.js","dtable-shared-row-view.js","pages/dtable-share-row/cell-formatter-widgets/select-option.js"],"names":["TextFormatter","className","this","props","value","React","Component","DEFAULT_FORMATTER","NumberFormatter","getValue","column","formatType","data","format","formatNumberValue","DEFAULT_FORMAT","DataFormatter","formatDateValue","SingleSelectFormatter","MultipleSelectFormatter","Array","isArray","map","item","index","key","CollaboratorOption","getCollaborator","window","app","collaborators","find","email","getContainerStyle","display","alignItems","marginRight","padding","height","fontSize","borderRadius","background","getAvatarStyle","margin","getAvatarIconStyle","width","containerStyle","avatarStyle","avatarIconStyle","collaborator","style","alt","name","src","avatar_url","CollaboratorFormatter","CheckboxFormatter","getStyle","marginLeft","verticalAlign","boxShadow","outline","transform","nextProps","type","readOnly","checked","mediaUrl","config","FileItem","onFileClick","fileItem","fileIconUrl","getFileIconUrl","onClick","title","FileFormatter","onFileItemClick","ImageItem","onImageDoubleClick","imageItem","onDoubleClick","ImageFormatter","onImageClick","LongTextFormatter","formatterLongTextValue","mdFile","processor","process","then","result","innerHtml","String","setState","isFormatValue","state","text","dangerouslySetInnerHTML","__html","FormatterConfig","CELL_TYPE","TEXT","NUMBER","DATE","CHECKBOX","SINGLE_SELECT","MULTIPLE_SELECT","COLLABORATOR","FILE","IMAGE","LONG_TEXT","RowItem","getCellFormatter","CellFormatter","cloneElement","shared","pageOptions","workspaceID","dtableName","AppMain","renderRowItems","row","columns","rows","forEach","rowItem","push","isLoadingCollaborator","dtableWebAPI","getTableRelatedUsers","res","user_list","mode","defaultProps","rowContent","SharedDTableRowView","JSON","parse","ReactDOM","render","document","getElementById","SelectOption","getCurrentOption","options","id","option","backgroundColor","color","textColor","currentOption","optionStyle"],"mappings":"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","file":"static/js/dtableSharedRowView.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  value: PropTypes.string,\n  column: PropTypes.object,\n};\n\nclass TextFormatter extends React.Component {\n\n  render() {\n    return (\n      <div className=\"form-control cell-formatter grid-cell-type-text\">{this.props.value}</div>\n    );\n  }\n}\n\nTextFormatter.propTypes = propTypes;\n\nexport default TextFormatter;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatNumberValue } from '../utils/utils';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  column: PropTypes.object,\n};\n\n\nconst DEFAULT_FORMATTER = 'number';\n\nclass NumberFormatter extends React.Component {\n\n  getValue = () => {\n    let { value, column } = this.props;\n    if (value !== '') {\n      let formatType = (column.data && column.data.format) ? column.data.format : DEFAULT_FORMATTER;\n      value = formatNumberValue(value, formatType);\n    }\n    return value;\n  }\n\n  render() {\n    return (\n      <div className=\"form-control cell-formatter grid-cell-type-number\">{this.getValue()}</div>\n    );\n  }\n}\n\nNumberFormatter.propTypes = propTypes;\n\nexport default NumberFormatter;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatDateValue } from '../utils/utils';\n\nconst propTypes = {\n  value: PropTypes.string,\n  column: PropTypes.object,\n};\n\nconst DEFAULT_FORMAT = 'YYYY-MM-DD';\n\nclass DataFormatter extends React.Component {\n\n  getValue = () => {\n    let { value, column } = this.props;\n    let format = (column.data && column.data.format) ? column.data.format : DEFAULT_FORMAT;\n    return formatDateValue(value, format);\n  }\n\n  render() {\n    return (\n      <div className=\"form-control cell-formatter grid-cell-type-date\">{this.getValue()}</div>\n    );\n  }\n}\n\nDataFormatter.propTypes = propTypes;\n\nexport default DataFormatter;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SelectOption from '../cell-formatter-widgets/select-option';\n\nconst propTypes = {\n  value: PropTypes.string,\n  column: PropTypes.object,\n};\n\nclass SingleSelectFormatter extends React.Component {\n\n  render() {\n    let { value, column }  = this.props;\n    return (\n      <div className=\"cell-formatter grid-cell-type-single-select\"><SelectOption value={value} column={column} /></div>\n    );\n  }\n}\n\nSingleSelectFormatter.propTypes = propTypes;\n\nexport default SingleSelectFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SelectOption from '../cell-formatter-widgets/select-option';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  column: PropTypes.object,\n};\n\nclass MultipleSelectFormatter extends React.Component {\n\n  render() {\n    let { value, column } = this.props;\n    return (\n      <div className=\"cell-formatter grid-cell-type-multiple-select\">\n        {value && Array.isArray(value) && value.map((item, index) => {\n          return (<SelectOption key={index} value={item} column={column} />);\n        })}\n      </div>\n    );\n  }\n}\n\nMultipleSelectFormatter.propTypes = propTypes;\n\nexport default MultipleSelectFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  value: PropTypes.string,\n  column: PropTypes.object,\n};\n\nclass CollaboratorOption extends React.Component {\n\n  getCollaborator = () => {\n    let { value } = this.props;\n    let { collaborators } = window.app;\n    let collaborator = collaborators.find(item => item.email === value);\n    return collaborator;\n  }\n\n  getContainerStyle = () => {\n    return {\n      display: 'inline-flex',\n      alignItems: 'center',\n      marginRight: '10px',\n      padding: '0 8px 0 2px',\n      height: '20px',\n      fontSize: '13px',\n      borderRadius: '10px',\n      background: '#eaeaea',\n    };\n  }\n\n  getAvatarStyle = () => {\n    return {\n      display: 'flex',\n      alignItems: 'center',\n      margin: '0 4px 0 2px',\n    };\n  }\n  \n  getAvatarIconStyle = () => {\n    return {\n      width: '16px',\n      height: '16px',\n      borderRadius: '50%',\n    };\n  }\n\n  render() {\n    let containerStyle = this.getContainerStyle();\n    let avatarStyle = this.getAvatarStyle();\n    let avatarIconStyle = this.getAvatarIconStyle();\n    let collaborator = this.getCollaborator();\n    return (\n      <div className=\"collaborator-container\" style={containerStyle}>\n        <span className=\"collaborator-avatar\" style={avatarStyle}>\n          <img className=\"collaborator-avatar-icon\" style={avatarIconStyle} alt={collaborator.name} src={collaborator.avatar_url} />\n        </span>\n        <span className=\"collaborator-name\">{collaborator.name}</span>\n      </div>\n    );\n  }\n}\n\nCollaboratorOption.propTypes = propTypes;\n\nexport default CollaboratorOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CollaboratorOption from '../cell-formatter-widgets/collaborator-option';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  column: PropTypes.object,\n};\n\nclass CollaboratorFormatter extends React.Component {\n\n  render() {\n    let { value } = this.props;\n    return (\n      <div className=\"cell-formatter grid-cell-type-collaborator\">\n        {value && Array.isArray(value) && value.map((item, index) => {\n          return <CollaboratorOption key={index} value={item} />;\n        })}\n      </div>\n    );\n  }\n}\n\nCollaboratorFormatter.propTypes = propTypes;\n\nexport default CollaboratorFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  column: PropTypes.object,\n};\n\nclass CheckboxFormatter extends React.Component {\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.value !== this.props.value;\n  }\n\n  getStyle = () => {\n    return {\n      display: 'inline',\n      marginLeft: '0',\n      width: '20px',\n      height: '20px',\n      verticalAlign: 'middle',\n      boxShadow: 'none',\n      outline: 'none',\n      transform: 'scale(1.1)',\n    };\n  }\n    \n  render() {\n    // need optimized\n    let value = this.props.value === true ? true : false;\n    let style = this.getStyle();\n    return (\n      <div className=\"cell-formatter grid-cell-type-checkbox\">\n        <input className=\"checkbox\" type='checkbox' style={style} readOnly checked={value}/>\n      </div>\n    );\n  }\n}\n\nCheckboxFormatter.propTypes = propTypes;\n\nexport default CheckboxFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getFileIconUrl } from '../utils/utils';\n\n// need optimized\nconst { mediaUrl } = window.app.config;\n\nconst propTypes = {\n  fileItem: PropTypes.object.isRequired,\n};\n\nclass FileItem extends React.Component {\n\n  onFileClick = () => {\n    // todo\n  }\n\n  render() {\n    let fileItem = this.props.fileItem;\n    let fileIconUrl = getFileIconUrl(mediaUrl, fileItem.name, fileItem.type);\n    return (\n      <div className=\"file-item\">\n        <img alt='' src={fileIconUrl} onClick={this.onFileClick} title={fileItem.name} />\n      </div>\n    );\n  }\n}\n\nFileItem.propTypes = propTypes;\n\nexport default FileItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FileItem from '../cell-formatter-widgets/file-item';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  column: PropTypes.object,\n};\n\nclass FileFormatter extends React.Component {\n\n  // todo\n  onFileItemClick = () => {\n\n  }\n\n  render() {\n    let value = this.props.value;\n    return (\n      <div className=\"cell-formatter grid-cell-type-file\">\n        {value && Array.isArray(value) && value.map((item, index) => {\n          return <FileItem key={index} fileItem={item}/>;\n        })}\n      </div>\n    );\n  }\n}\n\nFileFormatter.propTypes = propTypes;\n\nexport default FileFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  imageItem: PropTypes.string.isRequired,\n};\n\nclass ImageItem extends React.Component {\n\n  onImageDoubleClick = () => {\n    // todo\n  }\n\n  render() {\n    // todo previewer\n\n    return (\n      <div className=\"image-item\">\n        <img alt='' src={this.props.imageItem} onDoubleClick={this.onImageDoubleClick} />\n      </div>\n    );\n  }\n}\n\nImageItem.propTypes = propTypes;\n\nexport default ImageItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageItem from '../cell-formatter-widgets/image-item';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  column: PropTypes.object,\n};\n\nclass ImageFormatter extends React.Component {\n\n  // todo previewer\n  onImageClick = () => {\n\n  }\n\n  render() {\n    let value = this.props.value;\n    return (\n      <div className=\"cell-formatter grid-cell-type-image\">\n        {value && Array.isArray(value) && value.map((item, index) => {\n          return <ImageItem key={index} imageItem={item}/>;\n        })}\n      </div>\n    );\n  }\n}\n\nImageFormatter.propTypes = propTypes;\n\nexport default ImageFormatter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { processor } from '@seafile/seafile-editor/dist/utils/seafile-markdown2html';\nimport Loading from '../../../components/loading';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  column: PropTypes.object,\n};\n\n\nclass LongTextFormatter extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      innerHtml: null,\n      isFormatValue: true,\n    };\n  }\n\n  componentDidMount() {\n    let value = this.props.value;\n    let mdFile = value ? value.text : '';\n    if (mdFile) {\n      this.formatterLongTextValue(mdFile);\n    } else {\n      this.setState({\n        isFormatValue: false,\n        innerHtml: ''\n      });\n    }\n  }\n\n  formatterLongTextValue = (mdFile) => {\n    processor.process(mdFile).then((result) => {\n      let innerHtml = String(result);\n      this.setState({\n        isFormatValue: false,\n        innerHtml: innerHtml\n      });\n    });\n\n  }\n\n  render() {\n    if (this.state.isFormatValue) {\n      return <Loading />;\n    }\n\n    return (\n      <div className=\"cell-formatter grid-cell-type-longtext-formatter\">\n        <div dangerouslySetInnerHTML={{__html: this.state.innerHtml}}></div>\n      </div>\n    );\n  }\n\n}\n\nLongTextFormatter.propTypes = propTypes;\n\nexport default LongTextFormatter;\n","import React from 'react';\nimport { CELL_TYPE } from '../contants/contants';\nimport TextFormatter from './text-formatter';\nimport NumberFormatter from './number-formatter';\nimport DateFormatter from './date-formatter';\nimport SingleSelectFormatter from './single-select-formatter';\nimport MultipleSelectFormatter from './multiple-select-formatter';\nimport CollaboratorFormatter from './collaborator-formatter';\nimport CheckboxFormatter from './checkbox-formatter';\nimport FileFormatter from './file-formatter';\nimport ImageFormatter from './image-formatter';\nimport LongTextFormatter from './long-text-formatter';\n\nimport '../css/formatter.css';\n\nconst FormatterConfig = {\n  [CELL_TYPE.TEXT]: <TextFormatter />,\n  [CELL_TYPE.NUMBER]: <NumberFormatter />,\n  [CELL_TYPE.DATE]: <DateFormatter />,\n  [CELL_TYPE.CHECKBOX]: <CheckboxFormatter />,\n  [CELL_TYPE.SINGLE_SELECT]: <SingleSelectFormatter />,\n  [CELL_TYPE.MULTIPLE_SELECT]: <MultipleSelectFormatter />,\n  [CELL_TYPE.COLLABORATOR]: <CollaboratorFormatter />,\n  [CELL_TYPE.FILE]: <FileFormatter />,\n  [CELL_TYPE.IMAGE]: <ImageFormatter />,\n  [CELL_TYPE.LONG_TEXT]: <LongTextFormatter />,\n};\n\nexport default FormatterConfig; ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CellLabel from './cell-label';\nimport FormatterConfig from './cell-formatter/formatter-config';\nimport './css/row-item.css';\n\nconst propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.bool, PropTypes.number, PropTypes.object]),\n  column: PropTypes.object.isRequired,\n};\n\nclass RowItem extends React.Component {\n\n  getCellFormatter = () => {\n    let type = this.props.column.type;\n    return FormatterConfig[type];\n  }\n\n  render() {\n    let { value, column } = this.props;\n    let CellFormatter = this.getCellFormatter();\n    return (\n      <div className=\"share-row-item\">\n        <CellLabel column={column} />\n        {CellFormatter && React.cloneElement(CellFormatter, { value, column })}\n      </div>\n    );\n  }\n}\n\nRowItem.propTypes = propTypes;\n\nexport default RowItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RowItem from './row-item';\nimport { dtableWebAPI } from '../../utils/dtable-web-api';\nimport Loading from '../../components/loading';\n\nconst { workspaceID, dtableName } = window.shared.pageOptions;\n\nconst propTypes = {\n  mode: PropTypes.oneOf(['grid_mode', 'form_mode', 'grally_mode', 'calender_mode', 'kanban_mode']),\n  row: PropTypes.object.isRequired,\n  columns: PropTypes.array.isRequired,\n};\n\nclass AppMain extends React.Component {\n\n  static defaultProps = {\n    mode: 'form_mode',\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoadingCollaborator: true,\n    };\n  }\n\n  componentDidMount() {\n    dtableWebAPI.getTableRelatedUsers(workspaceID, dtableName).then(res => {\n      let collaborators = res.data ? res.data.user_list : [];\n      window.app = window.app ? window.app : {};\n      window.app.collaborators = collaborators;\n      this.setState({isLoadingCollaborator: false});\n    });\n  }\n\n  renderRowItems = () => {\n    let { row, columns } = this.props;\n    let rows = [];\n    columns.forEach((column, index) => {\n      let value = row[column.key];\n      let rowItem = <RowItem key={index} value={value} column={column}/>;\n      rows.push(rowItem);\n    });\n    return rows;\n  }\n\n  render() {\n\n    if (this.state.isLoadingCollaborator) {\n      return <Loading />;\n    }\n\n    let title = this.props.row['0000'];\n    return (\n      <div className=\"app-main\">\n        <div className={`${this.props.mode} dtable-share-row-container`}>\n          <div className=\"dtable-share-row-title\"><h3>{title}</h3></div>\n          <div className=\"dtable-share-row-items\">\n            {this.renderRowItems()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAppMain.propTypes = propTypes;\n\nexport default AppMain;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppMain from './pages/dtable-share-row/app-main';\n\nimport './css/dtable-share-row.css';\n\nconst { rowContent, columns } = window.shared.pageOptions;\n\nclass SharedDTableRowView extends React.Component {\n\n  render() {\n\n    return (\n      <AppMain row={JSON.parse(rowContent)['row']} columns={JSON.parse(columns)['columns']}/>\n    );\n  }\n\n}\n\nReactDOM.render(\n  <SharedDTableRowView />,\n  document.getElementById('wrapper')\n);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../css/select-option.css';\n\nconst propTypes = {\n  value: PropTypes.string,\n  column: PropTypes.object,\n};\n\nclass SelectOption extends React.Component {\n\n  getCurrentOption = () => {\n    let { value, column } = this.props;\n    let options = column.data.options;\n    let option = options.find(item => { return item.id === value;});\n    return option;\n  }\n\n  getStyle = () => {\n    let option = this.getCurrentOption();\n    let style = {\n      backgroundColor: option.color,\n      color: option.textColor || null,\n    };\n    return option ? style : null;\n  }\n\n  render() {\n    let { value, column } = this.props;\n    let currentOption = this.getCurrentOption();\n    if (!value || !column.data || !column.data.options || !currentOption) {\n      return (<div></div>);\n    }\n\n    let optionStyle = this.getStyle();\n    return (<div style={optionStyle} className=\"select-option\">{currentOption.name}</div>);\n  }\n}\n\nSelectOption.propTypes = propTypes;\n\nexport default SelectOption;\n"],"sourceRoot":""}